orgnazing it 

let words = ["cat", "dog", "bat", "sun", "cow", "fan", "man", "box", "owl"];
let morseCode = {
  a: ".-", b: "-...", c: "-.-.", d: "-..", e: ".", f: "..-.",
  g: "--.", h: "....", i: "..", j: ".---", k: "-.-", l: ".-..",
  m: "--", n: "-.", o: "---", p: ".--.", q: "--.-", r: ".-.",
  s: "...", t: "-", u: "..-", v: "...-", w: ".--", x: "-..-",
  y: "-.--", z: "--.."
};

let stars = [];
let currentWord = "";
let currentMorse = "";
let userInput = "";
let message = "";

// Color transition variable for animations
let colorPhase = 0;

function setup() {
  createCanvas(850, 700);
  textSize(20);
  textAlign(CENTER, CENTER);

  // Generate stars for the dynamic background
  for (let i = 0; i < 500; i++) {
    stars.push({
      x: random(width),
      y: random(height),
      size: random(1, 3),
      speed: random(0.5, 2), // Stars will move at different speeds
    });
  }

  pickNewWord();
}

function draw() {
  // Draw a gradient background
  drawGradientBackground();

  // Draw dynamic stars for the space effect
  drawStars();

  // Draw game elements
  drawGameSection();
  drawReferenceSection();

  // Update the color phase for glowing animations
  colorPhase += 0.02;
  if (colorPhase > TWO_PI) colorPhase = 0;
}

function drawGradientBackground() {
  // Create a gradient background
  for (let y = 0; y < height; y++) {
    let inter = map(y, 0, height, 0, 1);
    let c = lerpColor(color(10, 10, 30), color(0, 0, 0), inter); // Gradient from deep blue to black
    stroke(c);
    line(0, y, width, y);
  }
}

function drawStars() {
  for (let star of stars) {
    fill(255, 255, 255, random(150, 255)); // Twinkling effect
    noStroke();
    ellipse(star.x, star.y, star.size);

    // Move stars for a parallax effect
    star.y += star.speed;

    // Reset star position if it goes out of view
    if (star.y > height) {
      star.y = 0;
      star.x = random(width);
      star.size = random(1, 3);
    }
  }
}

function drawGameSection() {
  // Title
  fill(255);
  textSize(36);
  textFont("Georgia");
  text("✨ Morse Code Challenge ✨", width / 2, 50);

  // Current word
  textSize(24);
  textAlign(CENTER);
  fill(200, 255, 200);
  text(`Translate: "${currentWord}"`, width / 2, 120);

  // User input textbox
  fill(255, 255, 255, 200); // Semi-transparent white
  rect(width / 2 - 200, 200, 400, 50, 10); // Rounded edges
  fill(0); // Black text
  textAlign(LEFT, CENTER);
  text(userInput, width / 2 - 190, 225);

  // Feedback message
  textAlign(CENTER);
  textSize(18);
  fill(255);
  text(message, width / 2, 300);

  // Instructions
  textSize(16);
  fill(200);
  text("Use single spaces between Morse letters. Press Enter to submit.", width / 2, 350);
}

function drawReferenceSection() {
  textAlign(LEFT, CENTER);
  textSize(20);
  fill(255);
  text("Morse Code Reference:", 50, 400);

  // Display Morse code chart with smooth animations
  textSize(16);
  let x = 50;
  let y = 440;

  for (let [index, letter] of Object.entries(morseCode)) {
    if (currentWord.includes(index)) {
      let r = 128 + 127 * sin(colorPhase); // Smooth red transition
      let g = 128 + 127 * sin(colorPhase + PI / 2); // Smooth green transition
      let b = 128 + 127 * sin(colorPhase + PI); // Smooth blue transition
      fill(r, g, b); // Animated glow for active letters
    } else {
      fill(255);
    }

    text(`${index.toUpperCase()}: ${letter}`, x, y);
    y += 20;

    if (y > height - 100) {
      y = 440;
      x += 150; // Move to the next column
    }
  }
}

function keyPressed() {
  if (key === 'Enter') {
    checkAnswer();
  } else if (key === 'Backspace') {
    userInput = userInput.slice(0, -1);
  } else if (key === '.' || key === '-' || key === ' ') {
    userInput += key;
  }
}

function pickNewWord() {
  currentWord = random(words);
  currentMorse = wordToMorse(currentWord);
  userInput = "";
  message = "Type the Morse code for the word!";
}

function wordToMorse(word) {
  return word
    .split("")
    .map(letter => morseCode[letter])
    .join(" ");
}

function checkAnswer() {
  let normalizedInput = userInput.trim().replace(/\s+/g, " ");
  let normalizedMorse = currentMorse.trim();

  if (normalizedInput === normalizedMorse) {
    message = "✅ Correct! Well done!";
    setTimeout(pickNewWord, 2000);
  } else {
    message = `❌ Incorrect! Correct code: ${currentMorse}`;
  }
}
