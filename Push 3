added a net over the morse code reference 
// === CONSTANTS ===
const N_ANIM = 200;
const N_TRANSITION = N_ANIM / 2;
const N_WAIT = 100;
const N_FRAMES = 2 * (N_ANIM + N_WAIT);
const N_FRAMES_PATTERN = N_FRAMES / 3;

// Adjusted Circle Size
const rStep = 8;
const rMin = rStep * 20; // Minimum radius for the circle
const nSteps = 20;
const nDivs = 150;

const cols = 20;
const rows = 10;
const spacing = 20;
const stiffness = 0.28;
const damping = 0.95;

// === VARIABLES ===
let dots = [];
let stars = [];
let morseCode = {
  a: ".-", b: "-...", c: "-.-.", d: "-..", e: ".", f: "..-.",
  g: "--.", h: "....", i: "..", j: ".---", k: "-.-", l: ".-..",
  m: "--", n: "-.", o: "---", p: ".--.", q: "--.-", r: ".-.",
  s: "...", t: "-", u: "..-", v: "...-", w: ".--", x: "-..-",
  y: "-.--", z: "--.."
};
let words = ["time", "dust", "space", "black", "stars", "orbit", "void", "wave"];
let currentWord = "", userInput = "", message = "";

let cloth, grabbedParticle = null;
let colorOffset = 0;

// === SETUP FUNCTION ===
function setup() {
  createCanvas(1000, 700);
  textSize(20);
  textAlign(CENTER, CENTER);

  initializeStars();
  initializeCircle();
  initializeCloth();
  pickNewWord();
}

// === DRAW FUNCTION ===
function draw() {
  background(0);

  drawStars();
  drawTitle();
  drawCloth();
  drawAnimatedCircle();
  drawReferenceSection();
  drawGameInstructions();

  colorOffset += 0.01;
}

// === STAR FUNCTIONS ===
function initializeStars() {
  for (let i = 0; i < 300; i++) {
    stars.push({
      x: random(width),
      y: random(height),
      size: random(1, 3),
      speed: random(0.5, 2),
    });
  }
}

function drawStars() {
  let circleX = width / 2; // Circle's X-coordinate
  let circleY = height / 2 + 50; // Circle's Y-coordinate
  let circleRadius = rMin + nSteps * rStep; // Circle's outer radius

  for (let star of stars) {
    // Check if the star is inside the circle's radius
    let distanceFromCenter = dist(star.x, star.y, circleX, circleY);
    if (distanceFromCenter < circleRadius) {
      continue; // Skip stars inside the circle
    }

    // Draw stars
    fill(255, 255, 255, random(150, 255));
    noStroke();
    ellipse(star.x, star.y, star.size);

    // Move stars downward
    star.y += star.speed;
    if (star.y > height) {
      star.y = 0;
      star.x = random(width);
      star.size = random(1, 3);
    }
  }
}

// === TITLE FUNCTION ===
function drawTitle() {
  fill(255);
  textSize(30);
  text("TELL MURPH", width / 2, 50);
  textSize(16);
  text("Decode the Morse message to save the stars...", width / 2, 80);
}

// === ANIMATED CIRCLE FUNCTIONS ===
function initializeCircle() {
  let j0 = 0;
  for (let i = 0; i < nSteps; i++) {
    let r = rMin + i * rStep;
    let d1 = 2 * rStep;
    let d2 = 2 * r * sin(TAU / nDivs);
    let d3 = sqrt(sq(r - (r + rStep) * cos(TAU / nDivs)) + sq((r + rStep) * sin(TAU / nDivs)));
    let d4 = sqrt(sq(r - (r - rStep) * cos(TAU / nDivs)) + sq((r - rStep) * sin(TAU / nDivs)));
    let dMin = 2,
      dMax = min([d1, d2, d3, d4]) * 3 / 4;
    for (let j = j0; j < nDivs; j += 2) {
      let theta = j * TAU / nDivs;
      let x = width / 2 + r * cos(theta),
        y = height / 2 + r * sin(theta);
      dots.push({ x: x, y: y, r: r, theta: theta, dMin: dMin, dMax: dMax });
    }
    j0 = 1 - j0;
  }
}

function drawAnimatedCircle() {
  push();
  translate(width / 2, height / 2 + 50); // Adjusted to move the circle down

  let animBlock = (N_ANIM - N_TRANSITION) / (dots.length - 1);
  for (let i = 0; i < dots.length; i++) {
    let t;
    let frameInCycle = frameCount % N_FRAMES;

    if (frameInCycle < N_WAIT) t = 0;
    else if (frameInCycle < N_WAIT + N_ANIM) {
      let startTransition = i * animBlock;
      let endTransition = startTransition + N_TRANSITION;
      let f = frameInCycle - N_WAIT;
      if (f < startTransition) t = 0;
      else if (f < endTransition) t = (f - startTransition) / N_TRANSITION;
      else t = 1;
    } else if (frameInCycle < 2 * N_WAIT + N_ANIM) t = 1;
    else {
      let startTransition = (dots.length - i - 1) * animBlock;
      let endTransition = startTransition + N_TRANSITION;
      let f = frameInCycle - 2 * N_WAIT - N_ANIM;
      if (f < startTransition) t = 1;
      else if (f < endTransition) t = 1 - (f - startTransition) / N_TRANSITION;
      else t = 0;
    }

    let { x, y, r, theta, dMin, dMax } = dots[i];
    let tPattern = (frameCount % N_FRAMES_PATTERN) / N_FRAMES_PATTERN;
    let val1 = (sin(TAU * tPattern - r / 18 - 2 * theta) + 1) / 2;
    let val2 = (sin(TAU * tPattern + r / 18 - 2 * theta) + 1) / 2;
    let val = lerp(val1, val2, t);
    val *= 1 - sq(2 * (r - rMin) / (rStep * nSteps) - 1);
    let d = map(val, 0, 1, dMin, dMax);
    circle(x - width / 2, y - height / 2, d);
  }

  // Draw text inside the circle
  fill(255);
  noStroke();
  textSize(20);
  text(`Translate: ${currentWord.toUpperCase()}`, 0, -50);
  text(`Your Input: ${userInput}`, 0, 10);
  text(message, 0, 60);
  pop();
}

// === CLOTH FUNCTIONS ===
function initializeCloth() {
  gravity = createVector(0, 0.1);
  cloth = new Cloth(cols, rows);
}

function drawCloth() {
  push();
  translate(150, 100); // Position the cloth

  // Display springs
  cloth.springs.forEach((spring) => spring.display());

  // Display "bookshelf" particles
  for (let row of cloth.particles) {
    for (let p of row) {
      if (!p.fixed) {
        let r = random(100, 180); // Randomized book colors
        let g = random(80, 120);
        let b = random(60, 100);

        fill(r, g, b);
        noStroke();

        rect(p.pos.x, p.pos.y, spacing - 5, spacing * 0.8); // Books
      }
    }
  }
  cloth.update();
  pop();
}

function mousePressed() {
  let mx = mouseX - 150; // Adjust for cloth translation
  let my = mouseY - 100; // Adjust for cloth translation
  cloth.grab(mx, my);
}

function mouseDragged() {
  if (grabbedParticle) {
    grabbedParticle.pos.set(mouseX - 150, mouseY - 100);
    grabbedParticle.vel.set((mouseX - pmouseX) * 0.5, (mouseY - pmouseY) * 0.5);
  }
}

function mouseReleased() {
  if (grabbedParticle) {
    grabbedParticle.vel.mult(0.5);
    grabbedParticle = null;
  }
}

// === GAME LOGIC ===
function pickNewWord() {
  currentWord = random(words);
  userInput = "";
  message = "Enter the Morse code for the word.";
}

function checkAnswer() {
  const correctCode = currentWord
    .toLowerCase()
    .split("")
    .map((char) => morseCode[char])
    .join(" ");

  if (!userInput.trim()) {
    message = "❌ Please enter a valid Morse code!";
    return;
  }

  if (userInput.trim() === correctCode) {
    message = "✅ Correct! New word loaded.";
    pickNewWord();
  } else {
    message = `❌ Incorrect. Correct: ${correctCode}`;
  }
}

function keyPressed() {
  if (key === "Enter") checkAnswer();
  else if (key === "Backspace") userInput = userInput.slice(0, -1);
  else if (key === "." || key === "-" || key === " ") userInput += key;
}

// === MORSE CODE REFERENCE ===
function drawReferenceSection() {
  textAlign(LEFT);
  textSize(18);
  let x = 20, y = 150;
  fill(255);
  text("Morse Code Reference:", x, y - 30);

  for (let [letter, code] of Object.entries(morseCode)) {
    if (currentWord.includes(letter)) {
      let r = map(sin(colorOffset + letter.charCodeAt(0)), -1, 1, 100, 255);
      let g = map(sin(colorOffset + letter.charCodeAt(0) + PI / 2), -1, 1, 100, 255);
      let b = map(sin(colorOffset + letter.charCodeAt(0) + PI), -1, 1, 100, 255);
      fill(r, g, b);
    } else {
      fill(255);
    }
    text(`${letter.toUpperCase()}: ${code}`, x, y);
    y += 20;
    if (y > height - 50) {
      x += 120;
      y = 150;
    }
  }
}

// === GAME INSTRUCTIONS ===
function drawGameInstructions() {
  fill(255);
  textSize(18);
  textAlign(CENTER, CENTER);
  text("Press Enter to submit | Use '.' and '-' | Space for gap", width / 2, height - 50);
}

// === CLOTH SIMULATION CLASSES ===
class Particle {
  constructor(x, y, fixed) {
    this.pos = createVector(x, y);
    this.prevPos = this.pos.copy();
    this.fixed = fixed;
    this.vel = createVector(0, 0);
    this.acc = createVector(0, 0);
  }
  applyForce(force) {
    if (!this.fixed && this !== grabbedParticle) this.acc.add(force);
  }
  update() {
    if (!this.fixed) {
      this.vel.add(this.acc);
      this.vel.mult(damping);
      this.pos.add(this.vel);
      this.acc.mult(0);
    }
  }
}

class Spring {
  constructor(p1, p2, stiffness) {
    this.p1 = p1;
    this.p2 = p2;
    this.length = p5.Vector.dist(p1.pos, p2.pos);
    this.stiffness = stiffness;
  }
  update() {
    let force = p5.Vector.sub(this.p2.pos, this.p1.pos);
    let x = force.mag() - this.length;
    force.normalize();
    force.mult(this.stiffness * x);
    this.p1.applyForce(force);
    force.mult(-1);
    this.p2.applyForce(force);
  }
  display() {
    stroke(255, 100);
    line(this.p1.pos.x, this.p1.pos.y, this.p2.pos.x, this.p2.pos.y);
  }
}

class Cloth {
  constructor(cols, rows) {
    this.particles = [];
    this.springs = [];
    for (let i = 0; i < cols; i++) {
      this.particles[i] = [];
      for (let j = 0; j < rows; j++) {
        let fixed = j === 0;
        this.particles[i][j] = new Particle(i * spacing, j * spacing, fixed);
      }
    }
    for (let i = 0; i < cols; i++) {
      for (let j = 0; j < rows; j++) {
        if (i > 0)
          this.springs.push(new Spring(this.particles[i][j], this.particles[i - 1][j], stiffness));
        if (j > 0)
          this.springs.push(new Spring(this.particles[i][j], this.particles[i][j - 1], stiffness));
      }
    }
  }
  update() {
    this.springs.forEach((spring) => spring.update());
    this.particles.forEach((row) =>
      row.forEach((p) => {
        p.applyForce(gravity);
        p.update();
      })
    );
  }
  display() {
    this.springs.forEach((spring) => spring.display());
  }
  grab(x, y) {
    for (let row of this.particles) {
      for (let p of row) {
        if (dist(x, y, p.pos.x, p.pos.y) < spacing / 2 && !p.fixed) {
          grabbedParticle = p;
          return;
        }
      }
    }
  }
}
